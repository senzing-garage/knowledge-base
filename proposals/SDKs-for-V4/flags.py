#! /usr/bin/env python3

"""
Print flag values
"""


def bit(number):
    return number


# Bit flags.

SZ_EXPORT_INCLUDE_MULTI_RECORD_ENTITIES = 1
SZ_SEARCH_INCLUDE_RESOLVED = 1
SZ_EXPORT_INCLUDE_POSSIBLY_SAME = 1 << bit(1)
SZ_SEARCH_INCLUDE_POSSIBLY_SAME = 1 << bit(1)
SZ_EXPORT_INCLUDE_POSSIBLY_RELATED = 1 << bit(2)
SZ_SEARCH_INCLUDE_POSSIBLY_RELATED = 1 << bit(2)
SZ_EXPORT_INCLUDE_NAME_ONLY = 1 << bit(3)
SZ_SEARCH_INCLUDE_NAME_ONLY = 1 << bit(3)
SZ_EXPORT_INCLUDE_DISCLOSED = 1 << bit(4)
SZ_EXPORT_INCLUDE_SINGLE_RECORD_ENTITIES = 1 << bit(5)
SZ_ENTITY_INCLUDE_POSSIBLY_SAME_RELATIONS = 1 << bit(6)
SZ_ENTITY_INCLUDE_POSSIBLY_RELATED_RELATIONS = 1 << bit(7)
SZ_ENTITY_INCLUDE_NAME_ONLY_RELATIONS = 1 << bit(8)
SZ_ENTITY_INCLUDE_DISCLOSED_RELATIONS = 1 << bit(9)
SZ_ENTITY_INCLUDE_ALL_FEATURES = 1 << bit(10)
SZ_ENTITY_INCLUDE_REPRESENTATIVE_FEATURES = 1 << bit(11)
SZ_ENTITY_INCLUDE_ENTITY_NAME = 1 << bit(12)
SZ_ENTITY_INCLUDE_RECORD_SUMMARY = 1 << bit(13)
SZ_ENTITY_INCLUDE_RECORD_DATA = 1 << bit(14)
SZ_ENTITY_INCLUDE_RECORD_MATCHING_INFO = 1 << bit(15)
SZ_ENTITY_INCLUDE_RECORD_JSON_DATA = 1 << bit(16)
SZ_ENTITY_INCLUDE_RECORD_FEATURE_IDS = 1 << bit(18)
SZ_ENTITY_INCLUDE_RELATED_ENTITY_NAME = 1 << bit(19)
SZ_ENTITY_INCLUDE_RELATED_MATCHING_INFO = 1 << bit(20)
SZ_ENTITY_INCLUDE_RELATED_RECORD_SUMMARY = 1 << bit(21)
SZ_ENTITY_INCLUDE_RELATED_RECORD_DATA = 1 << bit(22)
SZ_ENTITY_OPTION_INCLUDE_INTERNAL_FEATURES = 1 << bit(23)
SZ_ENTITY_OPTION_INCLUDE_FEATURE_STATS = 1 << bit(24)
SZ_FIND_PATH_PREFER_EXCLUDE = 1 << bit(25)
SZ_INCLUDE_FEATURE_SCORES = 1 << bit(26)
SZ_SEARCH_INCLUDE_FEATURE_SCORES = 1 << bit(26)
SZ_SEARCH_INCLUDE_STATS = 1 << bit(27)
SZ_ENTITY_INCLUDE_RECORD_TYPES = 1 << bit(28)
SZ_ENTITY_INCLUDE_RELATED_RECORD_TYPES = 1 << bit(29)
SZ_FIND_PATH_MATCHING_INFO = 1 << bit(30)
SZ_ENTITY_INCLUDE_RECORD_UNMAPPED_DATA = 1 << bit(31)
SZ_ENTITY_OPTION_INCLUDE_FEATURE_ELEMENTS = 1 << bit(32)
SZ_FIND_NETWORK_MATCHING_INFO = 1 << bit(33)
SZ_ENTITY_OPTION_INCLUDE_MATCH_KEY_DETAILS = 1 << bit(34)
SZ_SEARCH_INCLUDE_MATCH_KEY_DETAILS = 1 << bit(34)
SZ_WITH_INFO = 1 << bit(63)

# Aggregates

SZ_EXPORT_INCLUDE_ALL_ENTITIES = (
    SZ_EXPORT_INCLUDE_MULTI_RECORD_ENTITIES | SZ_EXPORT_INCLUDE_SINGLE_RECORD_ENTITIES
)

SZ_EXPORT_INCLUDE_ALL_HAVING_RELATIONSHIPS = (
    SZ_EXPORT_INCLUDE_POSSIBLY_SAME
    | SZ_EXPORT_INCLUDE_POSSIBLY_RELATED
    | SZ_EXPORT_INCLUDE_NAME_ONLY
    | SZ_EXPORT_INCLUDE_DISCLOSED
)

SZ_ENTITY_INCLUDE_ALL_RELATIONS = (
    SZ_ENTITY_INCLUDE_POSSIBLY_SAME_RELATIONS
    | SZ_ENTITY_INCLUDE_POSSIBLY_RELATED_RELATIONS
    | SZ_ENTITY_INCLUDE_NAME_ONLY_RELATIONS
    | SZ_ENTITY_INCLUDE_DISCLOSED_RELATIONS
)

SZ_SEARCH_INCLUDE_ALL_ENTITIES = (
    SZ_SEARCH_INCLUDE_RESOLVED
    | SZ_SEARCH_INCLUDE_POSSIBLY_SAME
    | SZ_SEARCH_INCLUDE_POSSIBLY_RELATED
    | SZ_SEARCH_INCLUDE_NAME_ONLY
)

SZ_RECORD_DEFAULT_FLAGS = SZ_ENTITY_INCLUDE_RECORD_JSON_DATA

SZ_ENTITY_DEFAULT_FLAGS = (
    SZ_ENTITY_INCLUDE_ALL_RELATIONS
    | SZ_ENTITY_INCLUDE_REPRESENTATIVE_FEATURES
    | SZ_ENTITY_INCLUDE_ENTITY_NAME
    | SZ_ENTITY_INCLUDE_RECORD_SUMMARY
    | SZ_ENTITY_INCLUDE_RECORD_DATA
    | SZ_ENTITY_INCLUDE_RECORD_MATCHING_INFO
    | SZ_ENTITY_INCLUDE_RELATED_ENTITY_NAME
    | SZ_ENTITY_INCLUDE_RELATED_RECORD_SUMMARY
    | SZ_ENTITY_INCLUDE_RELATED_MATCHING_INFO
)

SZ_ENTITY_BRIEF_DEFAULT_FLAGS = (
    SZ_ENTITY_INCLUDE_RECORD_MATCHING_INFO
    | SZ_ENTITY_INCLUDE_ALL_RELATIONS
    | SZ_ENTITY_INCLUDE_RELATED_MATCHING_INFO
)

SZ_EXPORT_DEFAULT_FLAGS = SZ_EXPORT_INCLUDE_ALL_ENTITIES | SZ_ENTITY_DEFAULT_FLAGS

SZ_FIND_PATH_DEFAULT_FLAGS = (
    SZ_FIND_PATH_MATCHING_INFO
    | SZ_ENTITY_INCLUDE_ENTITY_NAME
    | SZ_ENTITY_INCLUDE_RECORD_SUMMARY
)

SZ_FIND_NETWORK_DEFAULT_FLAGS = (
    SZ_FIND_NETWORK_MATCHING_INFO
    | SZ_ENTITY_INCLUDE_ENTITY_NAME
    | SZ_ENTITY_INCLUDE_RECORD_SUMMARY
)

SZ_WHY_ENTITIES_DEFAULT_FLAGS = (
    SZ_ENTITY_DEFAULT_FLAGS
    | SZ_ENTITY_OPTION_INCLUDE_INTERNAL_FEATURES
    | SZ_ENTITY_OPTION_INCLUDE_FEATURE_STATS
    | SZ_INCLUDE_FEATURE_SCORES
)

SZ_WHY_RECORDS_DEFAULT_FLAGS = (
    SZ_ENTITY_DEFAULT_FLAGS
    | SZ_ENTITY_OPTION_INCLUDE_INTERNAL_FEATURES
    | SZ_ENTITY_OPTION_INCLUDE_FEATURE_STATS
    | SZ_INCLUDE_FEATURE_SCORES
)

SZ_WHY_RECORD_IN_ENTITY_DEFAULT_FLAGS = (
    SZ_ENTITY_DEFAULT_FLAGS
    | SZ_ENTITY_OPTION_INCLUDE_INTERNAL_FEATURES
    | SZ_ENTITY_OPTION_INCLUDE_FEATURE_STATS
    | SZ_INCLUDE_FEATURE_SCORES
)

SZ_HOW_ENTITY_DEFAULT_FLAGS = SZ_INCLUDE_FEATURE_SCORES

SZ_VIRTUAL_ENTITY_DEFAULT_FLAGS = SZ_ENTITY_DEFAULT_FLAGS

SZ_SEARCH_BY_ATTRIBUTES_ALL = (
    SZ_SEARCH_INCLUDE_ALL_ENTITIES
    | SZ_ENTITY_INCLUDE_REPRESENTATIVE_FEATURES
    | SZ_ENTITY_INCLUDE_ENTITY_NAME
    | SZ_ENTITY_INCLUDE_RECORD_SUMMARY
    | SZ_SEARCH_INCLUDE_FEATURE_SCORES
)

SZ_SEARCH_BY_ATTRIBUTES_STRONG = (
    SZ_SEARCH_INCLUDE_RESOLVED
    | SZ_SEARCH_INCLUDE_POSSIBLY_SAME
    | SZ_ENTITY_INCLUDE_REPRESENTATIVE_FEATURES
    | SZ_ENTITY_INCLUDE_ENTITY_NAME
    | SZ_ENTITY_INCLUDE_RECORD_SUMMARY
    | SZ_SEARCH_INCLUDE_FEATURE_SCORES
)

SZ_SEARCH_BY_ATTRIBUTES_MINIMAL_ALL = SZ_SEARCH_INCLUDE_ALL_ENTITIES

SZ_SEARCH_BY_ATTRIBUTES_MINIMAL_STRONG = (
    SZ_SEARCH_INCLUDE_RESOLVED | SZ_SEARCH_INCLUDE_POSSIBLY_SAME
)

SZ_SEARCH_BY_ATTRIBUTES_DEFAULT_FLAGS = SZ_SEARCH_BY_ATTRIBUTES_ALL

# List for printing

AGGREGATES = [
    "SZ_ENTITY_BRIEF_DEFAULT_FLAGS",
    "SZ_ENTITY_DEFAULT_FLAGS",
    "SZ_ENTITY_INCLUDE_ALL_RELATIONS",
    "SZ_EXPORT_DEFAULT_FLAGS",
    "SZ_EXPORT_INCLUDE_ALL_ENTITIES",
    "SZ_EXPORT_INCLUDE_ALL_HAVING_RELATIONSHIPS",
    "SZ_FIND_NETWORK_DEFAULT_FLAGS",
    "SZ_FIND_PATH_DEFAULT_FLAGS",
    "SZ_HOW_ENTITY_DEFAULT_FLAGS",
    "SZ_RECORD_DEFAULT_FLAGS",
    "SZ_SEARCH_BY_ATTRIBUTES_ALL",
    "SZ_SEARCH_BY_ATTRIBUTES_DEFAULT_FLAGS",
    "SZ_SEARCH_BY_ATTRIBUTES_MINIMAL_ALL",
    "SZ_SEARCH_BY_ATTRIBUTES_MINIMAL_STRONG",
    "SZ_SEARCH_BY_ATTRIBUTES_STRONG",
    "SZ_SEARCH_INCLUDE_ALL_ENTITIES",
    "SZ_VIRTUAL_ENTITY_DEFAULT_FLAGS",
    "SZ_WHY_ENTITIES_DEFAULT_FLAGS",
    "SZ_WHY_RECORD_IN_ENTITY_DEFAULT_FLAGS",
    "SZ_WHY_RECORDS_DEFAULT_FLAGS",
]


def as_hex(number):
    number_as_hex_string = "{:016X}".format(number)
    return " ".join(
        [
            number_as_hex_string[i : i + 4]
            for i in range(0, len(number_as_hex_string), 4)
        ]
    )


for AGGREGATE in AGGREGATES:
    print(as_hex(globals().get(AGGREGATE)), AGGREGATE)
